const fetch = require('node-fetch');

// Teste espec√≠fico para rea√ß√µes em mensagens enviadas
async function testarReacoesMensagensEnviadas() {
  console.log('üß™ Iniciando testes de rea√ß√µes em mensagens enviadas...\n');

  try {
    // Teste 1: Verificar se a API est√° funcionando
    console.log('1Ô∏è‚É£ Testando conectividade da API...');
    const response = await fetch('http://localhost:3000/api/messages');
    if (response.ok) {
      const messages = await response.json();
      console.log(`‚úÖ API est√° funcionando. ${messages.length} mensagens encontradas`);
    } else {
      console.log('‚ùå Erro na API:', response.status);
      return;
    }

    // Teste 2: Enviar uma mensagem de teste
    console.log('\n2Ô∏è‚É£ Enviando mensagem de teste...');
    const testMessage = {
      to: '1234567890@c.us', // N√∫mero de teste
      message: 'Teste de rea√ß√£o - ' + new Date().toISOString()
    };

    const sendResponse = await fetch('http://localhost:3000/api/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testMessage)
    });

    if (!sendResponse.ok) {
      console.log('‚ùå Erro ao enviar mensagem:', await sendResponse.text());
      return;
    }

    console.log('‚úÖ Mensagem enviada com sucesso');

    // Teste 3: Buscar a mensagem enviada
    console.log('\n3Ô∏è‚É£ Buscando mensagem enviada...');
    const messagesResponse = await fetch('http://localhost:3000/api/messages');
    const messages = await messagesResponse.json();
    
    const sentMessage = messages.find(m => 
      m.fromMe === true && 
      m.body === testMessage.message
    );

    if (!sentMessage) {
      console.log('‚ùå Mensagem enviada n√£o encontrada');
      return;
    }

    console.log('‚úÖ Mensagem enviada encontrada:', {
      id: sentMessage.id,
      timestamp: sentMessage.timestamp,
      fromMe: sentMessage.fromMe
    });

    // Teste 4: Testar rea√ß√£o na mensagem enviada
    console.log('\n4Ô∏è‚É£ Testando rea√ß√£o na mensagem enviada...');
    const reactionData = {
      msgTimestamp: sentMessage.timestamp,
      msgId: sentMessage.id,
      emoji: 'üëç',
      user: 'test-user'
    };

    const reactionResponse = await fetch('http://localhost:3000/api/react', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(reactionData)
    });

    if (reactionResponse.ok) {
      const reactionResult = await reactionResponse.json();
      console.log('‚úÖ Rea√ß√£o adicionada com sucesso:', reactionResult);
    } else {
      console.log('‚ùå Erro ao adicionar rea√ß√£o:', await reactionResponse.text());
    }

    // Teste 5: Verificar se a rea√ß√£o foi salva
    console.log('\n5Ô∏è‚É£ Verificando se a rea√ß√£o foi salva...');
    const messagesAfterReaction = await fetch('http://localhost:3000/api/messages').then(r => r.json());
    const messageWithReaction = messagesAfterReaction.find(m => m.id === sentMessage.id);

    if (messageWithReaction && messageWithReaction.reactions && messageWithReaction.reactions.length > 0) {
      console.log('‚úÖ Rea√ß√£o salva corretamente:', messageWithReaction.reactions);
    } else {
      console.log('‚ùå Rea√ß√£o n√£o foi salva corretamente');
    }

    // Teste 6: Testar remo√ß√£o de rea√ß√£o
    console.log('\n6Ô∏è‚É£ Testando remo√ß√£o de rea√ß√£o...');
    const removeReactionResponse = await fetch('http://localhost:3000/api/react', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(reactionData)
    });

    if (removeReactionResponse.ok) {
      const removeResult = await removeReactionResponse.json();
      console.log('‚úÖ Rea√ß√£o removida com sucesso:', removeResult);
    } else {
      console.log('‚ùå Erro ao remover rea√ß√£o:', await removeReactionResponse.text());
    }

    console.log('\nüéâ Testes de rea√ß√µes conclu√≠dos!');
    console.log('\nüìã Resumo das corre√ß√µes implementadas:');
    console.log('‚Ä¢ ‚úÖ Busca de mensagens por ID e timestamp');
    console.log('‚Ä¢ ‚úÖ Suporte a rea√ß√µes em mensagens enviadas');
    console.log('‚Ä¢ ‚úÖ Logs detalhados para debugging');
    console.log('‚Ä¢ ‚úÖ Compatibilidade com mensagens existentes');
    console.log('‚Ä¢ ‚úÖ Tratamento robusto de erros');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  }
}

// Executar testes
testarReacoesMensagensEnviadas(); 